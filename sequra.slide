Un paseo por Go




Pau Fernández
Profesor Colaborador, UPC Terrassa
pauek@minidosis.org
@pauek
http://pauek.info
http://github.com/pauek

* Código fuente de la charla

.link https://github.com/pauek/sequra-talk https://github.com/pauek/sequra-talk

#--------------------------------------------------

* Sobre Go

* Características de Go

- Un mejor C (compilado; tipado estático)
- Con "garbage collection"
- [[http://golang.org/doc/faq#Why_doesnt_Go_have_feature_X][Simple]]
- Sin clases, solo [[http://golang.org/ref/spec#Interface_types][_interfaces_]]
- Sin _templates_ (tipos parametrizados o _generics_)
- Concurrencia bien integrada ([[http://en.wikipedia.org/wiki/Communicating_sequential_processes][CSP]])

* Fortalezas de Go

- Compila muy rápido (análisis de dependencias super-simple)
- Diseño madurado (consenso de 3 visiones)
- [[http://golang.org/ref/spec][Especificación]] corta (relativamente)
- [[http://golang.org/pkg][Librería estándar estelar]]
- [[http://godoc.org][Documentación]] precisa y corta. 
- Comunidad de _cracks_ 

* Compila rápido?

.image compiling.png 540 620

* Quién usa Go?

- Google
- YouTube ([[https://github.com/youtube/vitess][vitess]], escalado de MySQL)
- Heroku (Doozer, base de datos distribuida)
- CloudFlare (CDN)
- Docker
- Canonical (JuJu)
- SoundCloud

Del blog: [[http://blog.golang.org/4years]["4 years of Go"]].

* GitHut

.image githut.png 600 900

* Hola mundo

.play hello.go

#--------------------------------------------------

* "Menú degustación"

* Declaración corta de variables

Las variables se pueden declarar implícitamente con *":="*

.play -edit short-vardecl.go

* Valor por defecto cero

El valor inicial de *todas* las variables es 0 o equivalente

.play -edit zero.go

* Tipos básicos

.play -edit tipos-basicos.go

Las variables sin usar son un error... ;)

* If

.play -edit if1.go

* If con instrucción previa

.play -edit if2.go

* For

Sin paréntesis. No existe el `while`.

.code for.go /_1/,/_1/
.code for.go /_2/,/_2/
.code for.go /_3/,/_3/
.code for.go /_4/,/_4/

* Múltiples resultados

.play -edit multiple-results.go

* Valores de retorno con nombre

.play -edit return-values.go

* Métodos

.play -edit vertex.go

* Métodos sobre tipos básicos

.play -edit abs-float.go

* Interfaces (1/4)

Un `interface` es una lista de métodos

.code geometry.go /interface/,/^$/

* Interfaces (2/4)

Si un tipo tiene todos los métodos satisface el `interface`.

.code geometry.go /square/,/circle/

* Interfaces (3/4)

Si un tipo tiene todos los métodos satisface el `interface`.

.code geometry.go /circle/,/main/

* Interfaces (4/4)

Si un tipo tiene todos los métodos satisface el `interface`.

.play geometry.go /measure/,

* Ejemplos

`Fprintf` recibe como primer parámetro un `io.Writer`

      type Writer interface {
         Write(p []byte) (n int, err error)
      }

`sort.Interface`

      type Interface interface {
         Len() int
         Less(i, j int) bool
         Swap(i, j int)
      }

`http.Handler`
 
      type Handler interface {
         ServeHTTP(ResponseWriter, *Request)
      }

#--------------------------------------------------

* Concurrencia

* Conceptos

*Gorutinas*

- Funciones que se lanzan concurrentemente (prefijo `go`).
- Se reparten en los threads disponibles.
- Baratas, se pueden crear miles.

*Canales*

- Una via de comunicación entre gorutinas.
- Bloquan la gorutina escritora/lectora hasta poder transferir el valor.
- Permiten comunicar valores de un tipo (cualquiera, incluso canales!).

* Hola

.play -edit say-hello.go

* Fibonacci

.play -edit fib-gen.go

* Bomba

.play -edit bomb.go

* Árboles equivalentes (1/3)

Problema: determinar si las secuencias de valores de las hojas de dos árboles son la misma.

.image tree.png 250 700 

En el ejemplo: 1, 1, 2, 3, 5, 8, 13.

* Árboles equivalentes (2/3)

.code equiv-trees.go /Tree/,/----/

* Árboles equivalentes (3/3)

.code equiv-trees.go /Same/,/^$/

* Ejemplos de servidores

* Servidor mínimo

.play -edit server1.go

* Servidor de ficheros

.code webshare.go

* Chat

.image diagrama_chat.png 550 550
